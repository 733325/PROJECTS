public class Card\n{\n\t// These constants represent the possible suits and \n\t// can be used to index into the suits array to get\n\t// their string representation.\n    private static final int HEARTS = 0;\n    private static final int DIAMONDS = 1;\n    private static final int SPADES = 2;\n    private static final int CLUBS = 3;\n    \n    // These constants represent the ranks of the non-number\n    // cards, or cards above 10. To maintain the ordering after\n    // 2-10, the integer values are 11, 12, 13, and 14 and \n    // also allow us to index into the ranks array to get their\n    // String representation.\n    private static final int JACK = 11;\n    private static final int QUEEN = 12;\n    private static final int KING = 13;\n    private static final int ACE = 14;\n\n    // Instance variables\n    \n    // This represents the rank of the card, the value from 2 to Ace.\n    private int rank;\n    \n    // This represents the suit of the card, one of hearts, diamonds, spades or clubs.\n    private int suit;\n    \n    // This represents the value of the card, which is 10 for face cards or 11 for an ace.\n    private int value;\n    \n    // This String array allows us to easily get the String value of a Card from its rank.\n    // There are two Xs in the front to provide padding so numbers have their String representation\n    // at the corresponding index. For example, the String for 2 is at index 2.\n    private String[] ranks = {\u0026quot;X\u0026quot;, \u0026quot;X\u0026quot;, \u0026quot;2\u0026quot;, \u0026quot;3\u0026quot;, \u0026quot;4\u0026quot;, \u0026quot;5\u0026quot;, \u0026quot;6\u0026quot;, \u0026quot;7\u0026quot;, \u0026quot;8\u0026quot;, \u0026quot;9\u0026quot;, \u0026quot;10\u0026quot;, \u0026quot;J\u0026quot;, \u0026quot;Q\u0026quot;, \u0026quot;K\u0026quot;, \u0026quot;A\u0026quot;};\n    \n    // The String array allow us to easily get the String value of the Card for its suit. This\n    // is the same order as the suits above so we can index into this array.\n    private String[] suits = {\u0026quot;H\u0026quot;, \u0026quot;D\u0026quot;, \u0026quot;S\u0026quot;, \u0026quot;C\u0026quot;};\n    \n    /**\n     * This is the constructor to create a new Card. To create a new card\n     * we pass in its rank and its suit.\n     * \n     * @param r\tThe rank of the card, as an int.\n     * @param s\tThe suit of the card, as an int.\n     */\n    public Card(int r, int s)\n    {\n        rank = r;\n        suit = s;\n    }\n    \n    // Getter Methods\n    \n    /**\n     * This returns the rank of the card as an integer.\n     * \n     * @return rank of card as an int.\n     */\n    public int getRank()\n    {\n        return rank;\n    }\n    \n    /**\n     * This returns the suit of the card as an integer.\n     * \n     * @return suit of card as an int.\n     */\n    public int getSuit()\n    {\n        return suit;\n    }\n    \n    /**\n     * This returns the value of the card as an integer.\n     * \n     * For facecards the value is 10, which is different\n     * than their rank underlying value. For aces the default\n     * value is 11.\n     * \n     * @return The value of the card as an int.\n     */\n    public int getValue()\n    {\n        int value = rank;\n        if(rank \u0026gt; 10)\n        {\n            value = 10;\n        }\n        \n        if(rank == ACE)\n        {\n            value = 11;\n        }\n        \n        return value;\n    }\n    \n    /**\n     * This utility method converts from a rank integer to a String.\n     * \n     * @param r\tThe rank.\n     * @return\tString version of rank.\n     */\n    public String rankToString(int r)\n    {\n        return ranks[r];\n    }\n    \n    /**\n     * This utility method converts from a suit integer to a String.\n     * \n     * @param s\tThe suit.\n     * @return\tString version of suit.\n     */\n    public String suitToString(int s)\n    {\n        return suits[s];\n    }\n    \n    /**\n     * Return the String version of the suit.\n     * \n     * @return String version of suit.\n     */\n    public String getSuitAsString()\n    {\n        return suitToString(suit);\n    }\n    \n    /**\n     * Return the String version of the rank.\n     * \n     * @return String version of the rank.\n     */\n    public String getRankAsString()\n    {\n        return rankToString(rank);\n    }\n    \n    /**\n     * This returns the String representation of a card which \n     * will be two characters. For example, the two of hearts would\n     * return 2H. Face cards have a short string so the ace of\n     * spades would return AS.\n     * \n     * @return String representation of Card.\n     */\n    public String toString()\n    {\n        // Get a string for rank\n        String rankString = ranks[rank];\n        \n        // Get a string for the suit\n        String suitString = suits[suit];\n        \n        // combine those\n        return rankString + suitString;\n    }\n\n    \n}",
                            
