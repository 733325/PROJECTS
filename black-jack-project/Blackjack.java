\n/**\n * This plays the Blackjack card game that we wrote throughout \n * the videos in this lesson.\n * \n * Try to play the game and test it out. As you play it, can you think\n * of ways to improve the game? Can you think of ways to improve the code\n * or organize the code?\n * \n * @author jkeesh\n *\n */\npublic class Blackjack extends ConsoleProgram \n{\n\n    private static final int HEARTS = 0;\n    private static final int DIAMONDS = 1;\n    private static final int SPADES = 2;\n    private static final int CLUBS = 3;\n    \n    private static final int JACK = 11;\n    private static final int QUEEN = 12;\n    private static final int KING = 13;\n    private static final int ACE = 14;\n    \n    // The starting bankroll for the player.\n    private static final int STARTING_BANKROLL = 100;\n    \n    /**\n     * Ask the player for a move, hit or stand.\n     * \n     * @return A lowercase string of \u0026quot;hit\u0026quot; or \u0026quot;stand\u0026quot;\n     * to indicate the player\u0026apos;s move.\n     */\n    private String getPlayerMove()\n    {\n        while(true)\n        {\n            String move = readLine(\u0026quot;Enter move (hit/stand): \u0026quot;);\n            move = move.toLowerCase();\n            \n            if(move.equals(\u0026quot;hit\u0026quot;) || move.equals(\u0026quot;stand\u0026quot;))\n            {\n                return move;\n            }\n            System.out.println(\u0026quot;Please try again.\u0026quot;); \n        }\n    }\n    \n    /**\n     * Play the dealer\u0026apos;s turn.\n     * \n     * The dealer must hit if the value of the hand is less\n     * than 17. \n     * \n     * @param dealer The hand for the dealer.\n     * @param deck The deck.\n     */\n    private void dealerTurn(Hand dealer, Deck deck)\n    {\n        while(true)\n        {\n            System.out.println(\u0026quot;Dealer\u0026apos;s hand\u0026quot;);\n            System.out.println(dealer);\n            \n            int value = dealer.getValue();\n            System.out.println(\u0026quot;Dealer\u0026apos;s hand has value \u0026quot; + value);\n            \n            readLine(\u0026quot;Enter to continue...\u0026quot;);\n            \n            if(value \u0026lt; 17)\n            {\n                System.out.println(\u0026quot;Dealer hits\u0026quot;);\n                Card c = deck.deal();\n                dealer.addCard(c);\n                \n                System.out.println(\u0026quot;Dealer card was \u0026quot; + c);\n                \n                if(dealer.busted())\n                {\n                    System.out.println(\u0026quot;Dealer busted!\u0026quot;);\n                    break;\n                }\n            }\n            else\n            {\n                System.out.println(\u0026quot;Dealer stands.\u0026quot;);\n                break;\n            }\n        }\n    }\n    \n    /**\n     * Play a player turn by asking the player to hit\n     * or stand.\n     * \n     * Return whether or not the player busted.\n     */\n    private boolean playerTurn(Hand player, Deck deck)\n    {\n        while(true)\n        {\n            String move = getPlayerMove();\n            \n            if(move.equals(\u0026quot;hit\u0026quot;))\n            {\n                Card c = deck.deal();\n                System.out.println(\u0026quot;Your card was: \u0026quot; + c);\n                player.addCard(c);\n                System.out.println(\u0026quot;Player\u0026apos;s hand\u0026quot;);\n                System.out.println(player);\n                \n                if(player.busted())\n                {\n                    return true;\n                }\n            }\n            else\n            {\n                // If we didn\u0026apos;t hit, the player chose to \n                // stand, which means the turn is over.\n                return false;\n            }\n            \n        }\n    }\n    \n    /**\n     * Determine if the player wins. \n     * \n     * If the player busted, they lose. If the player did \n     * not bust but the dealer busted, the player wins.\n     * \n     * Then check the values of the hands.\n     * \n     * @param player The player hand.\n     * @param dealer The dealer hand.\n     * @return\n     */\n    private boolean playerWins(Hand player, Hand dealer)\n    {\n        if(player.busted())\n        {\n            return false;\n        }\n        \n        if(dealer.busted())\n        {\n            return true;\n        }\n        \n        return player.getValue() \u0026gt; dealer.getValue();\n    }\n    \n    /**\n     * Check if there was a push, which means the player and\n     * dealer tied.\n     * \n     * @param player The player hand.\n     * @param dealer The dealer hand.\n     * @return\n     */\n    private boolean push(Hand player, Hand dealer)\n    {\n        return player.getValue() == dealer.getValue();\n    }\n    \n    /**\n     * Find the winner between the player hand and dealer\n     * hand. Return how much was won or lost.\n     */\n    private double findWinner(Hand dealer, Hand player, int bet)\n    {\n        if(playerWins(player, dealer))\n        {\n            System.out.println(\u0026quot;Player wins!\u0026quot;);\n            \n            if(player.hasBlackjack())\n            {\n                return 1.5 * bet;\n            }\n            \n            return bet;\n        }\n        else if(push(player, dealer))\n        {\n            System.out.println(\u0026quot;You push\u0026quot;);\n            return 0;\n        }\n        else\n        {\n            System.out.println(\u0026quot;Dealer wins\u0026quot;);\n            return -bet;\n        }\n    }\n    \n    /**\n     * This plays a round of blackjack which includes:\n     * - Creating a deck\n     * - Creating the hands\n     * - Dealing the round\n     * - Playing the player turn\n     * - Playing the dealer turn\n     * - Finding the winner\n     * \n     * @param bankroll\n     * @return The new bankroll for the player.\n     */\n    private double playRound(double bankroll)\n    {\n        int bet = readInt(\u0026quot;What is your bet? \u0026quot;);\n        while(bet \u0026gt; bankroll){\n            System.out.println (\u0026quot;please try again\u0026quot;);\n            bet = readInt(\u0026quot;What is your bet? \u0026quot;);\n        }\n        Deck deck = new Deck();\n        deck.shuffle();\n        \n        Hand player = new Hand();\n        Hand dealer = new Hand();\n        \n        player.addCard(deck.deal());\n        dealer.addCard(deck.deal());\n        player.addCard(deck.deal());\n        dealer.addCard(deck.deal());\n        \n        System.out.println(\u0026quot;Player\u0026apos;s Hand\u0026quot;);\n        System.out.println(player);\n        \n        \n        System.out.println(\u0026quot;Dealer\u0026apos;s hand\u0026quot;);\n        //System.out.println(dealer);\n        dealer.printDealerHand();\n        \n        boolean playerBusted = playerTurn(player, deck);\n        \n        if(playerBusted)\n        {\n            System.out.println(\u0026quot;You busted :(\u0026quot;);\n        }\n\n        readLine(\u0026quot;Enter for dealer turn...\u0026quot;);\n        dealerTurn(dealer, deck);\n        \n        double bankrollChange = findWinner(dealer, player, bet);\n        \n        bankroll += bankrollChange;\n        \n        System.out.println(\u0026quot;New bankroll: \u0026quot; + bankroll);\n        \n        return bankroll;\n    }\n    \n    /**\n     * Play the blackjack game. Initialize the bankroll and keep\n     * playing roudns as long as the user wants to.\n     */\n    public void run()\n    {\n        double bankroll = STARTING_BANKROLL;\n        System.out.println(\u0026quot;Starting bankroll: \u0026quot; + bankroll);\n   \n        while(true)\n        {\n            bankroll = playRound(bankroll);\n            \n            String playAgain = readLine(\u0026quot;Would you like to play again? (Y/N)\u0026quot;);\n            if(playAgain.equalsIgnoreCase(\u0026quot;N\u0026quot;))\n            {\n                break;\n            }\n        }\n        \n        System.out.println(\u0026quot;Thanks for playing!\u0026quot;);\n    }\n\t\n}",
                            
