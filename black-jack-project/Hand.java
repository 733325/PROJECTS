import java.util.*;\n\npublic class Hand \n{\n\n    private static final int HEARTS = 0;\n    private static final int DIAMONDS = 1;\n    private static final int SPADES = 2;\n    private static final int CLUBS = 3;\n\n    private static final int JACK = 11;\n    private static final int QUEEN = 12;\n    private static final int KING = 13;\n    private static final int ACE = 14;\n\n    // This represents the list of cards in the hand.\n    private ArrayList\u0026lt;Card\u0026gt; cards;\n    \n    /**\n     * This constructor sets up our hand by initializing our\n     * ArrayList.\n     */\n    public Hand()\n    {\n        cards = new ArrayList\u0026lt;Card\u0026gt;();\n    }\n    \n    /**\n     * This adds a card to our hand.\n     * \n     * @param c The card to add to the hand.\n     */\n    public void addCard(Card c)\n    {\n        cards.add(c);\n    }\n    \n    /**\n     * This returns the value of the hand as an integer.\n     * \n     * The value of the hand is the sum of the values\n     * of the individual cards. There is also an adjustment\n     * made for the value of an ace, which can be 11 or 1\n     * depending on the situation.\n     * \n     * @return The value of the hand.\n     */\n    public int getValue()\n    {\n        int sum = 0;\n        int aceCount = 0;\n        \n        for(Card c: cards)\n        {\n            sum += c.getValue();\n            \n            if(c.getRank() == ACE)\n            {\n                aceCount++;\n            }\n        }\n        \n        while(sum \u0026gt; 21 \u0026amp;\u0026amp; aceCount \u0026gt; 0)\n        {\n            sum -= 10;\n            aceCount--;\n        }\n        \n        return sum;\n    }\n    \n    /**\n     * Return if this hand has a blackjack.\n     * \n     * @return If the hand is a blackjack.\n     */\n    public boolean hasBlackjack()\n    {\n        return getValue() == 21 \u0026amp;\u0026amp; cards.size() == 2;\n    }\n    \n    /**\n     * Return if the hand busted, which means has a value\n     * greater than 21.\n     * \n     * @return If the hand busted.\n     */\n    public boolean busted()\n    {\n        return getValue() \u0026gt; 21;\n    }\n    \n    /**\n     * Return if the hand is a five-card-charlie, which means\n     * contained five cards.\n     * \n     * @return If the hand was a five-card charlie.\n     */\n    public boolean fiveCardCharlie()\n    {\n        return cards.size() == 5;\n    }\n    \n    /**\n     * Print out a dealer hand, and show an X instead of\n     * the first card.\n     */\n    public void printDealerHand()\n    {\n        for(int i = 0; i \u0026lt; cards.size(); i++)\n        {\n            Card c = cards.get(i);\n            \n            if(i == 0)\n            {\n                System.out.print(\u0026quot;X \u0026quot;);\n            }\n            else\n            {\n                System.out.print(c + \u0026quot; \u0026quot;);\n            }\n        }\n        System.out.println();\n    }\n    \n    \n    /**\n     * Return a String representation of the hand, including showing\n     * the value.\n     */\n    public String toString()\n    {\n        String result = \u0026quot;\u0026quot;;\n        \n        for(Card c: cards)\n        {\n            result += c + \u0026quot; \u0026quot;;\n        }\n        \n        result += \u0026quot;(\u0026quot; + getValue() + \u0026quot;)\u0026quot;;\n        \n        return result;\n    }\n\n}",
                            
